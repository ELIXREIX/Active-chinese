import type { ChineseWord } from '../types/game';

// Google Sheets configuration
const GOOGLE_SHEETS_API_KEY = import.meta.env.VITE_GOOGLE_SHEETS_API_KEY;
const SHEET_ID = import.meta.env.VITE_GOOGLE_SHEET_ID;

// Sample data - Fallback when Google Sheets is not available
export const sampleWords: ChineseWord[] = [
  {
    id: '1',
    chinese: '‰Ω†Â•Ω',
    pinyin: 'n«ê h«éo',
    meaning: 'hello',
    level: 'beginner',
    category: 'greetings'
  },
  {
    id: '2',
    chinese: 'Ë∞¢Ë∞¢',
    pinyin: 'xi√® xi√®',
    meaning: 'thank you',
    level: 'beginner',
    category: 'greetings'
  },
  {
    id: '3',
    chinese: 'ÂÜçËßÅ',
    pinyin: 'z√†i ji√†n',
    meaning: 'goodbye',
    level: 'beginner',
    category: 'greetings'
  },
  {
    id: '4',
    chinese: 'Â≠¶‰π†',
    pinyin: 'xu√© x√≠',
    meaning: 'to study/learn',
    level: 'beginner',
    category: 'education'
  },
  {
    id: '5',
    chinese: 'ÊúãÂèã',
    pinyin: 'p√©ng y«íu',
    meaning: 'friend',
    level: 'beginner',
    category: 'relationships'
  },
  {
    id: '6',
    chinese: 'ÂÆ∂Â∫≠',
    pinyin: 'jiƒÅ t√≠ng',
    meaning: 'family',
    level: 'beginner',
    category: 'relationships'
  },
  {
    id: '7',
    chinese: 'Â∑•‰Ωú',
    pinyin: 'g≈çng zu√≤',
    meaning: 'work/job',
    level: 'intermediate',
    category: 'career'
  },
  {
    id: '8',
    chinese: 'Êó∂Èó¥',
    pinyin: 'sh√≠ jiƒÅn',
    meaning: 'time',
    level: 'intermediate',
    category: 'time'
  },
  {
    id: '9',
    chinese: 'Âú∞Êñπ',
    pinyin: 'd√¨ fƒÅng',
    meaning: 'place',
    level: 'intermediate',
    category: 'location'
  },
  {
    id: '10',
    chinese: 'Áæé‰∏Ω',
    pinyin: 'mƒõi l√¨',
    meaning: 'beautiful',
    level: 'intermediate',
    category: 'adjectives'
  }
];

// Fetch words from Google Sheets
export async function fetchWordsFromGoogleSheets(): Promise<ChineseWord[]> {
  try {
    if (!GOOGLE_SHEETS_API_KEY || !SHEET_ID) {
      console.warn('Google Sheets API key or Sheet ID not configured, using sample data');
      return sampleWords;
    }

    console.log('üîç Attempting to fetch data from Google Sheets...');
    console.log('üìã API Key status:', GOOGLE_SHEETS_API_KEY ? '‚úÖ Loaded' : '‚ùå Missing');
    console.log('üìÑ Sheet ID:', SHEET_ID);

    // First, check if we can access the sheet metadata
    const metadataUrl = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}?key=${GOOGLE_SHEETS_API_KEY}`;
    console.log('üîó Testing sheet access:', metadataUrl);
    
    const metadataResponse = await fetch(metadataUrl);
    
    if (!metadataResponse.ok) {
      console.error('‚ùå Cannot access Google Sheet:', metadataResponse.status, metadataResponse.statusText);
      
      if (metadataResponse.status === 403) {
        console.error('üîí 403 Forbidden Error - The Google Sheet is not publicly accessible');
        console.error('üí° Solution: Go to your Google Sheet ‚Üí Share ‚Üí Change to "Anyone with the link can view"');
      } else if (metadataResponse.status === 400) {
        console.error('üîë 400 Bad Request - Check if Google Sheets API is enabled for your API key');
      }
      
      const errorText = await metadataResponse.text();
      console.error('üìã Error details:', errorText);
      console.warn('‚ö†Ô∏è Falling back to sample data...');
      return sampleWords;
    }    const metadata = await metadataResponse.json();
    console.log('‚úÖ Sheet metadata retrieved successfully!');
    console.log('üìä Sheet title:', metadata.properties?.title);
    console.log('üìÑ Available sheets:', metadata.sheets?.map((s: { properties: { title: string } }) => s.properties.title).join(', '));

    // Try to fetch data from available sheets
    const availableSheets = metadata.sheets?.map((s: { properties: { title: string } }) => s.properties.title) || [];
    const targetSheets = ['‡πÄ‡∏•‡πà‡∏° 1', '‡πÄ‡∏•‡πà‡∏° 2', 'Sheet1', '‡πÄ‡∏•‡πà‡∏°1', '‡πÄ‡∏•‡πà‡∏°2'];
    const sheetsToFetch = targetSheets.filter(sheet => availableSheets.includes(sheet));
    
    if (sheetsToFetch.length === 0) {
      console.warn('‚ö†Ô∏è No matching sheets found. Available sheets:', availableSheets);
      console.warn('üîç Trying first available sheet...');
      if (availableSheets.length > 0) {
        sheetsToFetch.push(availableSheets[0]);
      }
    }

    console.log('üìã Fetching data from sheets:', sheetsToFetch);

    // Fetch data from identified sheets
    const sheetPromises = sheetsToFetch.map(sheetName => fetchSheetData(sheetName));
    const sheetResults = await Promise.all(sheetPromises);
    
    // Combine data from all sheets
    const allWords = sheetResults.flat();
    
    console.log(`‚úÖ Successfully loaded ${allWords.length} words from Google Sheets`);
    return allWords.length > 0 ? allWords : sampleWords;
  } catch (error) {
    console.error('‚ùå Error fetching from Google Sheets:', error);
    console.warn('‚ö†Ô∏è Falling back to sample data...');
    // Fallback to sample data if Google Sheets fails
    return sampleWords;
  }
}

async function fetchSheetData(sheetName: string): Promise<ChineseWord[]> {
  try {
    const range = `${sheetName}!A1:D`; // Include header row for debugging
    const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${encodeURIComponent(range)}?key=${GOOGLE_SHEETS_API_KEY}`;
    
    console.log(`üîç Fetching data from "${sheetName}"...`);
    console.log(`üì° URL: ${url}`);
    
    const response = await fetch(url);
    
    if (!response.ok) {
      console.error(`‚ùå Failed to fetch "${sheetName}": ${response.status} ${response.statusText}`);
      
      if (response.status === 403) {
        console.error('üîí 403 Forbidden - Sheet is not publicly accessible');
      } else if (response.status === 400) {
        console.error('‚ùå 400 Bad Request - Invalid sheet name or range');
      }
      
      const errorText = await response.text();
      console.error('üìã Error details:', errorText);
      return [];
    }
    
    const data = await response.json();
    
    if (!data.values || data.values.length === 0) {
      console.warn(`‚ö†Ô∏è No data found in sheet: "${sheetName}"`);
      return [];
    }
    
    console.log(`üìä Raw data from "${sheetName}": ${data.values.length} rows`);
    console.log(`üìã Header row:`, data.values[0]);
    console.log(`üìù Sample data rows:`, data.values.slice(1, 4));
    
    // Skip header row (index 0)
    const dataRows = data.values.slice(1);
    
    const mappedWords = dataRows.map((row: string[], index: number) => {
      const word = {
        id: `${sheetName}_${index + 1}`,
        chinese: row[1] || '', // Column B
        pinyin: row[2] || '',  // Column C
        meaning: row[3] || '', // Column D (Thai meaning)
        level: 'beginner' as const, // Default level
        category: sheetName === '‡πÄ‡∏•‡πà‡∏° 1' ? 'book1' : 'book2' // Category based on sheet
      };
      
      // Debug first few words
      if (index < 3) {
        console.log(`üî§ Word ${index + 1}:`, word);
        console.log(`üìÑ Raw row:`, row);
      }
      
      return word;
    });
    
    // Filter out empty rows
    const filteredWords = mappedWords.filter((word: ChineseWord) => word.chinese && word.pinyin && word.meaning);
    
    console.log(`‚úÖ "${sheetName}": ${mappedWords.length} total rows ‚Üí ${filteredWords.length} valid words after filtering`);
    
    if (filteredWords.length === 0 && mappedWords.length > 0) {
      console.warn(`‚ö†Ô∏è All rows were filtered out! Check data format:`);
      console.log(`üìä Sample filtered word:`, mappedWords[0]);
    }
    
    return filteredWords;
  } catch (error) {
    console.error(`‚ùå Error fetching sheet "${sheetName}":`, error);
    return [];
  }
}

// Fetch words from specific book
export async function fetchWordsFromBook(bookName: '‡πÄ‡∏•‡πà‡∏° 1' | '‡πÄ‡∏•‡πà‡∏° 2'): Promise<ChineseWord[]> {
  try {
    if (!GOOGLE_SHEETS_API_KEY || !SHEET_ID) {
      console.warn('Google Sheets API key or Sheet ID not configured, using sample data');
      return sampleWords;
    }

    console.log(`üîç Attempting to fetch data from book: ${bookName}...`);
    console.log('üìã API Key status:', GOOGLE_SHEETS_API_KEY ? '‚úÖ Loaded' : '‚ùå Missing');
    console.log('üìÑ Sheet ID:', SHEET_ID);

    // First, check if we can access the sheet metadata
    const metadataUrl = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}?key=${GOOGLE_SHEETS_API_KEY}`;
    console.log('üîó Testing sheet access:', metadataUrl);
    
    const metadataResponse = await fetch(metadataUrl);
    
    if (!metadataResponse.ok) {
      console.error('‚ùå Cannot access Google Sheet:', metadataResponse.status, metadataResponse.statusText);
      
      if (metadataResponse.status === 403) {
        console.error('üîí 403 Forbidden Error - The Google Sheet is not publicly accessible');
        console.error('üí° Solution: Go to your Google Sheet ‚Üí Share ‚Üí Change to "Anyone with the link can view"');
      } else if (metadataResponse.status === 400) {
        console.error('üîë 400 Bad Request - Check if Google Sheets API is enabled for your API key');
      }
      
      const errorText = await metadataResponse.text();
      console.error('üìã Error details:', errorText);
      console.warn('‚ö†Ô∏è Falling back to sample data...');
      return sampleWords;
    }

    const metadata = await metadataResponse.json();
    console.log('‚úÖ Sheet metadata retrieved successfully!');
    console.log('üìä Sheet title:', metadata.properties?.title);
    console.log('üìÑ Available sheets:', metadata.sheets?.map((s: { properties: { title: string } }) => s.properties.title).join(', '));

    // Check if the requested book exists
    const availableSheets = metadata.sheets?.map((s: { properties: { title: string } }) => s.properties.title) || [];
    
    if (!availableSheets.includes(bookName)) {
      console.error(`‚ùå Book "${bookName}" not found. Available sheets:`, availableSheets);
      console.warn('‚ö†Ô∏è Falling back to sample data...');
      return sampleWords;
    }

    console.log(`üìã Fetching data from book: ${bookName}`);

    // Fetch data from the specific book
    const bookWords = await fetchSheetData(bookName);
    
    console.log(`‚úÖ Successfully loaded ${bookWords.length} words from "${bookName}"`);
    return bookWords.length > 0 ? bookWords : sampleWords;
  } catch (error) {
    console.error('‚ùå Error fetching from Google Sheets:', error);
    console.warn('‚ö†Ô∏è Falling back to sample data...');
    // Fallback to sample data if Google Sheets fails
    return sampleWords;
  }
}

// Utility functions for word management
export function getWordsByLevel(words: ChineseWord[], level: ChineseWord['level']): ChineseWord[] {
  return words.filter(word => word.level === level);
}

export function getWordsByCategory(words: ChineseWord[], category: string): ChineseWord[] {
  return words.filter(word => word.category === category);
}

export function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}
